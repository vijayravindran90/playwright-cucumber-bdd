"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ast_1 = require("../utils/ast");
function getRange(node) {
    const callee = node.callee;
    const start = node.parent.type === 'AwaitExpression'
        ? node.parent.range[0]
        : callee.object.range[0];
    return [start, callee.range[1]];
}
exports.default = {
    create(context) {
        return {
            CallExpression(node) {
                if ((0, ast_1.isCalleeObject)(node, 'page') &&
                    ((0, ast_1.isCalleeProperty)(node, '$') || (0, ast_1.isCalleeProperty)(node, '$$'))) {
                    context.report({
                        messageId: 'noElementHandle',
                        suggest: [
                            {
                                messageId: (0, ast_1.isCalleeProperty)(node, '$')
                                    ? 'replaceElementHandleWithLocator'
                                    : 'replaceElementHandlesWithLocator',
                                fix: (fixer) => fixer.replaceTextRange(getRange(node), 'page.locator'),
                            },
                        ],
                        node,
                    });
                }
            },
        };
    },
    meta: {
        docs: {
            category: 'Possible Errors',
            description: 'The use of ElementHandle is discouraged, use Locator instead',
            recommended: true,
            url: 'https://github.com/playwright-community/eslint-plugin-playwright/tree/main/docs/rules/no-element-handle.md',
        },
        hasSuggestions: true,
        messages: {
            noElementHandle: 'Unexpected use of element handles.',
            replaceElementHandleWithLocator: 'Replace `page.$` with `page.locator`',
            replaceElementHandlesWithLocator: 'Replace `page.$$` with `page.locator`',
        },
        type: 'suggestion',
    },
};
