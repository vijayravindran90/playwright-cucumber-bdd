{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/support_code_library_builder/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { buildParameterType } from './build_parameter_type'\nimport { getDefinitionLineAndUri } from './get_definition_line_and_uri'\nimport { IdGenerator } from '@cucumber/messages'\nimport * as messages from '@cucumber/messages'\nimport TestCaseHookDefinition from '../models/test_case_hook_definition'\nimport TestStepHookDefinition from '../models/test_step_hook_definition'\nimport TestRunHookDefinition from '../models/test_run_hook_definition'\nimport StepDefinition from '../models/step_definition'\nimport { formatLocation } from '../formatter/helpers'\nimport validateArguments from './validate_arguments'\nimport arity from 'util-arity'\n\nimport {\n  CucumberExpression,\n  ParameterTypeRegistry,\n  RegularExpression,\n} from '@cucumber/cucumber-expressions'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport {\n  DefineStepPattern,\n  IDefineStepOptions,\n  IDefineSupportCodeMethods,\n  IDefineTestCaseHookOptions,\n  IDefineTestStepHookOptions,\n  IDefineTestRunHookOptions,\n  IParameterTypeDefinition,\n  ISupportCodeLibrary,\n  TestCaseHookFunction,\n  TestStepHookFunction,\n  ParallelAssignmentValidator,\n  ISupportCodeCoordinates,\n  IDefineStep,\n} from './types'\nimport World from './world'\nimport { ICanonicalSupportCodeIds } from '../runtime/parallel/command_types'\nimport { GherkinStepKeyword } from '../models/gherkin_step_keyword'\n\ninterface IStepDefinitionConfig {\n  code: any\n  line: number\n  options: any\n  keyword: GherkinStepKeyword\n  pattern: string | RegExp\n  uri: string\n}\n\ninterface ITestCaseHookDefinitionConfig {\n  code: any\n  line: number\n  options: any\n  uri: string\n}\n\ninterface ITestStepHookDefinitionConfig {\n  code: any\n  line: number\n  options: any\n  uri: string\n}\n\ninterface ITestRunHookDefinitionConfig {\n  code: any\n  line: number\n  options: any\n  uri: string\n}\n\nexport const builtinParameterTypes = [\n  'bigdecimal',\n  'biginteger',\n  'byte',\n  'double',\n  'float',\n  'int',\n  'long',\n  'short',\n  'string',\n  'word',\n  '',\n]\n\nexport class SupportCodeLibraryBuilder {\n  public readonly methods: IDefineSupportCodeMethods\n\n  private originalCoordinates: ISupportCodeCoordinates\n  private afterTestCaseHookDefinitionConfigs: ITestCaseHookDefinitionConfig[]\n  private afterTestRunHookDefinitionConfigs: ITestRunHookDefinitionConfig[]\n  private afterTestStepHookDefinitionConfigs: ITestStepHookDefinitionConfig[]\n  private beforeTestCaseHookDefinitionConfigs: ITestCaseHookDefinitionConfig[]\n  private beforeTestRunHookDefinitionConfigs: ITestRunHookDefinitionConfig[]\n  private beforeTestStepHookDefinitionConfigs: ITestStepHookDefinitionConfig[]\n  private cwd: string\n  private defaultTimeout: number\n  private definitionFunctionWrapper: any\n  private newId: IdGenerator.NewId\n  private parameterTypeRegistry: ParameterTypeRegistry\n  private stepDefinitionConfigs: IStepDefinitionConfig[]\n  private World: any\n  private parallelCanAssign: ParallelAssignmentValidator\n\n  constructor() {\n    const methods: IDefineSupportCodeMethods = {\n      After: this.defineTestCaseHook(\n        () => this.afterTestCaseHookDefinitionConfigs\n      ),\n      AfterAll: this.defineTestRunHook(\n        () => this.afterTestRunHookDefinitionConfigs\n      ),\n      AfterStep: this.defineTestStepHook(\n        () => this.afterTestStepHookDefinitionConfigs\n      ),\n      Before: this.defineTestCaseHook(\n        () => this.beforeTestCaseHookDefinitionConfigs\n      ),\n      BeforeAll: this.defineTestRunHook(\n        () => this.beforeTestRunHookDefinitionConfigs\n      ),\n      BeforeStep: this.defineTestStepHook(\n        () => this.beforeTestStepHookDefinitionConfigs\n      ),\n      defineParameterType: this.defineParameterType.bind(this),\n      defineStep: this.defineStep('Unknown', () => this.stepDefinitionConfigs),\n      Given: this.defineStep('Given', () => this.stepDefinitionConfigs),\n      setDefaultTimeout: (milliseconds) => {\n        this.defaultTimeout = milliseconds\n      },\n      setDefinitionFunctionWrapper: (fn) => {\n        this.definitionFunctionWrapper = fn\n      },\n      setWorldConstructor: (fn) => {\n        this.World = fn\n      },\n      setParallelCanAssign: (fn: ParallelAssignmentValidator): void => {\n        this.parallelCanAssign = fn\n      },\n      Then: this.defineStep('Then', () => this.stepDefinitionConfigs),\n      When: this.defineStep('When', () => this.stepDefinitionConfigs),\n    }\n    const checkInstall = (method: string) => {\n      if (doesNotHaveValue(this.cwd)) {\n        throw new Error(\n          `\n          You're calling functions (e.g. \"${method}\") on an instance of Cucumber that isn't running.\n          This means you have an invalid installation, mostly likely due to:\n          - Cucumber being installed globally\n          - A project structure where your support code is depending on a different instance of Cucumber\n          Either way, you'll need to address this in order for Cucumber to work.\n          See https://github.com/cucumber/cucumber-js/blob/main/docs/installation.md#invalid-installations\n          `\n        )\n      }\n    }\n    this.methods = new Proxy(methods, {\n      get(\n        target: IDefineSupportCodeMethods,\n        method: keyof IDefineSupportCodeMethods\n      ): any {\n        return (...args: any[]) => {\n          checkInstall(method)\n          // @ts-expect-error difficult to type this correctly\n          return target[method](...args)\n        }\n      },\n    })\n  }\n\n  defineParameterType(options: IParameterTypeDefinition<any>): void {\n    const parameterType = buildParameterType(options)\n    this.parameterTypeRegistry.defineParameterType(parameterType)\n  }\n\n  defineStep(\n    keyword: GherkinStepKeyword,\n    getCollection: () => IStepDefinitionConfig[]\n  ): IDefineStep {\n    return (\n      pattern: DefineStepPattern,\n      options: IDefineStepOptions | Function,\n      code?: Function\n    ) => {\n      if (typeof options === 'function') {\n        code = options\n        options = {}\n      }\n      const { line, uri } = getDefinitionLineAndUri(this.cwd)\n      validateArguments({\n        args: { code, pattern, options },\n        fnName: 'defineStep',\n        location: formatLocation({ line, uri }),\n      })\n      getCollection().push({\n        code,\n        line,\n        options,\n        keyword,\n        pattern,\n        uri,\n      })\n    }\n  }\n\n  defineTestCaseHook(\n    getCollection: () => ITestCaseHookDefinitionConfig[]\n  ): <WorldType>(\n    options:\n      | string\n      | IDefineTestCaseHookOptions\n      | TestCaseHookFunction<WorldType>,\n    code?: TestCaseHookFunction<WorldType>\n  ) => void {\n    return <WorldType>(\n      options:\n        | string\n        | IDefineTestCaseHookOptions\n        | TestCaseHookFunction<WorldType>,\n      code?: TestCaseHookFunction<WorldType>\n    ) => {\n      if (typeof options === 'string') {\n        options = { tags: options }\n      } else if (typeof options === 'function') {\n        code = options\n        options = {}\n      }\n      const { line, uri } = getDefinitionLineAndUri(this.cwd)\n      validateArguments({\n        args: { code, options },\n        fnName: 'defineTestCaseHook',\n        location: formatLocation({ line, uri }),\n      })\n      getCollection().push({\n        code,\n        line,\n        options,\n        uri,\n      })\n    }\n  }\n\n  defineTestStepHook(\n    getCollection: () => ITestStepHookDefinitionConfig[]\n  ): <WorldType>(\n    options:\n      | string\n      | IDefineTestStepHookOptions\n      | TestStepHookFunction<WorldType>,\n    code?: TestStepHookFunction<WorldType>\n  ) => void {\n    return <WorldType>(\n      options:\n        | string\n        | IDefineTestStepHookOptions\n        | TestStepHookFunction<WorldType>,\n      code?: TestStepHookFunction<WorldType>\n    ) => {\n      if (typeof options === 'string') {\n        options = { tags: options }\n      } else if (typeof options === 'function') {\n        code = options\n        options = {}\n      }\n      const { line, uri } = getDefinitionLineAndUri(this.cwd)\n      validateArguments({\n        args: { code, options },\n        fnName: 'defineTestStepHook',\n        location: formatLocation({ line, uri }),\n      })\n      getCollection().push({\n        code,\n        line,\n        options,\n        uri,\n      })\n    }\n  }\n\n  defineTestRunHook(\n    getCollection: () => ITestRunHookDefinitionConfig[]\n  ): (options: IDefineTestRunHookOptions | Function, code?: Function) => void {\n    return (options: IDefineTestRunHookOptions | Function, code?: Function) => {\n      if (typeof options === 'function') {\n        code = options\n        options = {}\n      }\n      const { line, uri } = getDefinitionLineAndUri(this.cwd)\n      validateArguments({\n        args: { code, options },\n        fnName: 'defineTestRunHook',\n        location: formatLocation({ line, uri }),\n      })\n      getCollection().push({\n        code,\n        line,\n        options,\n        uri,\n      })\n    }\n  }\n\n  wrapCode({\n    code,\n    wrapperOptions,\n  }: {\n    code: Function\n    wrapperOptions: any\n  }): Function {\n    if (doesHaveValue(this.definitionFunctionWrapper)) {\n      const codeLength = code.length\n      const wrappedCode = this.definitionFunctionWrapper(code, wrapperOptions)\n      if (wrappedCode !== code) {\n        return arity(codeLength, wrappedCode)\n      }\n      return wrappedCode\n    }\n    return code\n  }\n\n  buildTestCaseHookDefinitions(\n    configs: ITestCaseHookDefinitionConfig[],\n    canonicalIds?: string[]\n  ): TestCaseHookDefinition[] {\n    return configs.map(({ code, line, options, uri }, index) => {\n      const wrappedCode = this.wrapCode({\n        code,\n        wrapperOptions: options.wrapperOptions,\n      })\n      return new TestCaseHookDefinition({\n        code: wrappedCode,\n        id: canonicalIds ? canonicalIds[index] : this.newId(),\n        line,\n        options,\n        unwrappedCode: code,\n        uri,\n      })\n    })\n  }\n\n  buildTestStepHookDefinitions(\n    configs: ITestStepHookDefinitionConfig[]\n  ): TestStepHookDefinition[] {\n    return configs.map(({ code, line, options, uri }) => {\n      const wrappedCode = this.wrapCode({\n        code,\n        wrapperOptions: options.wrapperOptions,\n      })\n      return new TestStepHookDefinition({\n        code: wrappedCode,\n        id: this.newId(),\n        line,\n        options,\n        unwrappedCode: code,\n        uri,\n      })\n    })\n  }\n\n  buildTestRunHookDefinitions(\n    configs: ITestRunHookDefinitionConfig[]\n  ): TestRunHookDefinition[] {\n    return configs.map(({ code, line, options, uri }) => {\n      const wrappedCode = this.wrapCode({\n        code,\n        wrapperOptions: options.wrapperOptions,\n      })\n      return new TestRunHookDefinition({\n        code: wrappedCode,\n        id: this.newId(),\n        line,\n        options,\n        unwrappedCode: code,\n        uri,\n      })\n    })\n  }\n\n  buildStepDefinitions(canonicalIds?: string[]): {\n    stepDefinitions: StepDefinition[]\n    undefinedParameterTypes: messages.UndefinedParameterType[]\n  } {\n    const stepDefinitions: StepDefinition[] = []\n    const undefinedParameterTypes: messages.UndefinedParameterType[] = []\n    this.stepDefinitionConfigs.forEach(\n      ({ code, line, options, keyword, pattern, uri }, index) => {\n        let expression\n        if (typeof pattern === 'string') {\n          try {\n            expression = new CucumberExpression(\n              pattern,\n              this.parameterTypeRegistry\n            )\n          } catch (e) {\n            if (doesHaveValue(e.undefinedParameterTypeName)) {\n              undefinedParameterTypes.push({\n                name: e.undefinedParameterTypeName,\n                expression: pattern,\n              })\n              return\n            }\n            throw e\n          }\n        } else {\n          expression = new RegularExpression(\n            pattern,\n            this.parameterTypeRegistry\n          )\n        }\n\n        const wrappedCode = this.wrapCode({\n          code,\n          wrapperOptions: options.wrapperOptions,\n        })\n        stepDefinitions.push(\n          new StepDefinition({\n            code: wrappedCode,\n            expression,\n            id: canonicalIds ? canonicalIds[index] : this.newId(),\n            line,\n            options,\n            keyword,\n            pattern,\n            unwrappedCode: code,\n            uri,\n          })\n        )\n      }\n    )\n    return { stepDefinitions, undefinedParameterTypes }\n  }\n\n  finalize(canonicalIds?: ICanonicalSupportCodeIds): ISupportCodeLibrary {\n    const stepDefinitionsResult = this.buildStepDefinitions(\n      canonicalIds?.stepDefinitionIds\n    )\n    return {\n      originalCoordinates: this.originalCoordinates,\n      afterTestCaseHookDefinitions: this.buildTestCaseHookDefinitions(\n        this.afterTestCaseHookDefinitionConfigs,\n        canonicalIds?.afterTestCaseHookDefinitionIds\n      ),\n      afterTestRunHookDefinitions: this.buildTestRunHookDefinitions(\n        this.afterTestRunHookDefinitionConfigs\n      ),\n      afterTestStepHookDefinitions: this.buildTestStepHookDefinitions(\n        this.afterTestStepHookDefinitionConfigs\n      ),\n      beforeTestCaseHookDefinitions: this.buildTestCaseHookDefinitions(\n        this.beforeTestCaseHookDefinitionConfigs,\n        canonicalIds?.beforeTestCaseHookDefinitionIds\n      ),\n      beforeTestRunHookDefinitions: this.buildTestRunHookDefinitions(\n        this.beforeTestRunHookDefinitionConfigs\n      ),\n      beforeTestStepHookDefinitions: this.buildTestStepHookDefinitions(\n        this.beforeTestStepHookDefinitionConfigs\n      ),\n      defaultTimeout: this.defaultTimeout,\n      parameterTypeRegistry: this.parameterTypeRegistry,\n      undefinedParameterTypes: stepDefinitionsResult.undefinedParameterTypes,\n      stepDefinitions: stepDefinitionsResult.stepDefinitions,\n      World: this.World,\n      parallelCanAssign: this.parallelCanAssign,\n    }\n  }\n\n  reset(\n    cwd: string,\n    newId: IdGenerator.NewId,\n    originalCoordinates: ISupportCodeCoordinates = {\n      requireModules: [],\n      requirePaths: [],\n      importPaths: [],\n    }\n  ): void {\n    this.cwd = cwd\n    this.newId = newId\n    this.originalCoordinates = originalCoordinates\n    this.afterTestCaseHookDefinitionConfigs = []\n    this.afterTestRunHookDefinitionConfigs = []\n    this.afterTestStepHookDefinitionConfigs = []\n    this.beforeTestCaseHookDefinitionConfigs = []\n    this.beforeTestRunHookDefinitionConfigs = []\n    this.beforeTestStepHookDefinitionConfigs = []\n    this.definitionFunctionWrapper = null\n    this.defaultTimeout = 5000\n    this.parameterTypeRegistry = new ParameterTypeRegistry()\n    this.stepDefinitionConfigs = []\n    this.parallelCanAssign = () => true\n    this.World = World\n  }\n}\n\nexport default new SupportCodeLibraryBuilder()\n"]}