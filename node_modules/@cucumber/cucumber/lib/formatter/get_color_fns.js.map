{"version":3,"file":"get_color_fns.js","sourceRoot":"","sources":["../../src/formatter/get_color_fns.ts"],"names":[],"mappings":";;;;;AAAA,kDAAyB;AACzB,mDAAyD;AAGzD,oDAAmD;AAcnD,SAAwB,WAAW,CACjC,MAAgB,EAChB,GAAsB,EACtB,OAAiB;IAEjB,MAAM,OAAO,GAAc,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IAC9D,IAAI,OAAO,EAAE;QACX,MAAM,aAAa,GAAG,IAAI,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACjD,OAAO;YACL,SAAS,CAAC,MAA4B;gBACpC,OAAO;oBACL,SAAS,EAAE,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,eAAK,CAAC;oBACxC,MAAM,EAAE,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,eAAK,CAAC;oBACrC,MAAM,EAAE,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,eAAK,CAAC;oBACvC,OAAO,EAAE,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,eAAK,CAAC;oBACzC,OAAO,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,eAAK,CAAC;oBACvC,SAAS,EAAE,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,eAAK,CAAC;oBAC3C,OAAO,EAAE,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,eAAK,CAAC;iBAC1C,CAAC,MAAM,CAAC,CAAA;YACX,CAAC;YACD,QAAQ,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,eAAK,CAAC;YACxC,GAAG,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,eAAK,CAAC;YACnC,SAAS,EAAE,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,eAAK,CAAC;YAC1C,WAAW,EAAE,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,eAAK,CAAC;YAC1C,YAAY,EAAE,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,eAAK,CAAC;YAC3C,UAAU,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,eAAK,CAAC;SAC3C,CAAA;KACF;SAAM;QACL,OAAO;YACL,SAAS,CAAC,OAA6B;gBACrC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YACjB,CAAC;YACD,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAClB,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACb,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACnB,WAAW,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACrB,YAAY,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACtB,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SACrB,CAAA;KACF;AACH,CAAC;AAxCD,8BAwCC;AAED,SAAS,aAAa,CACpB,MAAgB,EAChB,GAAsB,EACtB,OAAiB;IAEjB,MAAM,OAAO,GAAc,IAAA,8BAAa,EAAC,MAAM,CAAC,CAAA;IAChD,4EAA4E;IAC5E,IAAI,aAAa,IAAI,GAAG,IAAI,IAAA,gCAAgB,EAAC,OAAO,CAAC,EAAE;QACrD,OAAO,OAAO,CAAA;KACf;IACD,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAA;AAClD,CAAC","sourcesContent":["import chalk from 'chalk'\nimport { ColorInfo, supportsColor } from 'supports-color'\nimport { TestStepResultStatus } from '@cucumber/messages'\nimport { Writable } from 'stream'\nimport { doesNotHaveValue } from '../value_checker'\n\nexport type IColorFn = (text: string) => string\n\nexport interface IColorFns {\n  forStatus: (status: TestStepResultStatus) => IColorFn\n  location: IColorFn\n  tag: IColorFn\n  diffAdded: IColorFn\n  diffRemoved: IColorFn\n  errorMessage: IColorFn\n  errorStack: IColorFn\n}\n\nexport default function getColorFns(\n  stream: Writable,\n  env: NodeJS.ProcessEnv,\n  enabled?: boolean\n): IColorFns {\n  const support: ColorInfo = detectSupport(stream, env, enabled)\n  if (support) {\n    const chalkInstance = new chalk.Instance(support)\n    return {\n      forStatus(status: TestStepResultStatus) {\n        return {\n          AMBIGUOUS: chalkInstance.red.bind(chalk),\n          FAILED: chalkInstance.red.bind(chalk),\n          PASSED: chalkInstance.green.bind(chalk),\n          PENDING: chalkInstance.yellow.bind(chalk),\n          SKIPPED: chalkInstance.cyan.bind(chalk),\n          UNDEFINED: chalkInstance.yellow.bind(chalk),\n          UNKNOWN: chalkInstance.yellow.bind(chalk),\n        }[status]\n      },\n      location: chalkInstance.gray.bind(chalk),\n      tag: chalkInstance.cyan.bind(chalk),\n      diffAdded: chalkInstance.green.bind(chalk),\n      diffRemoved: chalkInstance.red.bind(chalk),\n      errorMessage: chalkInstance.red.bind(chalk),\n      errorStack: chalkInstance.grey.bind(chalk),\n    }\n  } else {\n    return {\n      forStatus(_status: TestStepResultStatus) {\n        return (x) => x\n      },\n      location: (x) => x,\n      tag: (x) => x,\n      diffAdded: (x) => x,\n      diffRemoved: (x) => x,\n      errorMessage: (x) => x,\n      errorStack: (x) => x,\n    }\n  }\n}\n\nfunction detectSupport(\n  stream: Writable,\n  env: NodeJS.ProcessEnv,\n  enabled?: boolean\n): ColorInfo {\n  const support: ColorInfo = supportsColor(stream)\n  // if we find FORCE_COLOR, we can let the supports-color library handle that\n  if ('FORCE_COLOR' in env || doesNotHaveValue(enabled)) {\n    return support\n  }\n  return enabled ? support || { level: 1 } : false\n}\n"]}