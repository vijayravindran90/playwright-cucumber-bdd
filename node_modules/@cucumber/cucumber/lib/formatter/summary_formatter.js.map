{"version":3,"file":"summary_formatter.js","sourceRoot":"","sources":["../../src/formatter/summary_formatter.ts"],"names":[],"mappings":"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","sourcesContent":["import { formatIssue, formatSummary, isFailure, isWarning } from './helpers'\nimport Formatter, { IFormatterOptions } from './'\nimport { doesHaveValue } from '../value_checker'\nimport * as messages from '@cucumber/messages'\nimport { ITestCaseAttempt } from './helpers/event_data_collector'\nimport { formatUndefinedParameterTypes } from './helpers/issue_helpers'\nimport { durationBetweenTimestamps } from '../time'\n\ninterface ILogIssuesRequest {\n  issues: ITestCaseAttempt[]\n  title: string\n}\n\nexport default class SummaryFormatter extends Formatter {\n  public static readonly documentation: string =\n    'Summary output of feature and scenarios'\n\n  constructor(options: IFormatterOptions) {\n    super(options)\n    let testRunStartedTimestamp: messages.Timestamp\n    options.eventBroadcaster.on('envelope', (envelope: messages.Envelope) => {\n      if (doesHaveValue(envelope.testRunStarted)) {\n        testRunStartedTimestamp = envelope.testRunStarted.timestamp\n      }\n      if (doesHaveValue(envelope.testRunFinished)) {\n        const testRunFinishedTimestamp = envelope.testRunFinished.timestamp\n        this.logSummary(\n          durationBetweenTimestamps(\n            testRunStartedTimestamp,\n            testRunFinishedTimestamp\n          )\n        )\n      }\n    })\n  }\n\n  logSummary(testRunDuration: messages.Duration): void {\n    const failures: ITestCaseAttempt[] = []\n    const warnings: ITestCaseAttempt[] = []\n    const testCaseAttempts = this.eventDataCollector.getTestCaseAttempts()\n    testCaseAttempts.forEach((testCaseAttempt) => {\n      if (\n        isFailure(\n          testCaseAttempt.worstTestStepResult,\n          testCaseAttempt.willBeRetried\n        )\n      ) {\n        failures.push(testCaseAttempt)\n      } else if (\n        isWarning(\n          testCaseAttempt.worstTestStepResult,\n          testCaseAttempt.willBeRetried\n        )\n      ) {\n        warnings.push(testCaseAttempt)\n      }\n    })\n    if (this.eventDataCollector.undefinedParameterTypes.length > 0) {\n      this.log(\n        formatUndefinedParameterTypes(\n          this.eventDataCollector.undefinedParameterTypes\n        )\n      )\n    }\n    if (failures.length > 0) {\n      this.logIssues({ issues: failures, title: 'Failures' })\n    }\n    if (warnings.length > 0) {\n      this.logIssues({ issues: warnings, title: 'Warnings' })\n    }\n    this.log(\n      formatSummary({\n        colorFns: this.colorFns,\n        testCaseAttempts,\n        testRunDuration,\n      })\n    )\n  }\n\n  logIssues({ issues, title }: ILogIssuesRequest): void {\n    this.log(`${title}:\\n\\n`)\n    issues.forEach((testCaseAttempt, index) => {\n      this.log(\n        formatIssue({\n          colorFns: this.colorFns,\n          number: index + 1,\n          snippetBuilder: this.snippetBuilder,\n          supportCodeLibrary: this.supportCodeLibrary,\n          testCaseAttempt,\n          printAttachments: this.printAttachments,\n        })\n      )\n    })\n  }\n}\n"]}