{"version":3,"file":"test_case_attempt_formatter.js","sourceRoot":"","sources":["../../../src/formatter/helpers/test_case_attempt_formatter.ts"],"names":[],"mappings":"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","sourcesContent":["import indentString from 'indent-string'\nimport * as messages from '@cucumber/messages'\nimport figures from 'figures'\nimport { formatLocation } from './location_helpers'\nimport {\n  IParsedTestStep,\n  parseTestCaseAttempt,\n} from './test_case_attempt_parser'\nimport { formatStepArgument } from './step_argument_formatter'\nimport { IColorFns } from '../get_color_fns'\nimport { doesHaveValue, valueOrDefault } from '../../value_checker'\nimport { ITestCaseAttempt } from './event_data_collector'\nimport StepDefinitionSnippetBuilder from '../step_definition_snippet_builder'\nimport { ISupportCodeLibrary } from '../../support_code_library_builder/types'\n\nconst CHARACTERS: Map<messages.TestStepResultStatus, string> = new Map([\n  [messages.TestStepResultStatus.AMBIGUOUS, figures.cross],\n  [messages.TestStepResultStatus.FAILED, figures.cross],\n  [messages.TestStepResultStatus.PASSED, figures.tick],\n  [messages.TestStepResultStatus.PENDING, '?'],\n  [messages.TestStepResultStatus.SKIPPED, '-'],\n  [messages.TestStepResultStatus.UNDEFINED, '?'],\n])\n\nfunction getStepMessage(testStep: IParsedTestStep): string {\n  switch (testStep.result.status) {\n    case messages.TestStepResultStatus.AMBIGUOUS:\n    case messages.TestStepResultStatus.FAILED:\n      return testStep.result.message\n    case messages.TestStepResultStatus.UNDEFINED:\n      return `${\n        'Undefined. Implement with the following snippet:' + '\\n\\n'\n      }${indentString(testStep.snippet, 2)}\\n`\n    case messages.TestStepResultStatus.PENDING:\n      return 'Pending'\n  }\n  return ''\n}\n\ninterface IFormatStepRequest {\n  colorFns: IColorFns\n  testStep: IParsedTestStep\n  printAttachments?: boolean\n}\n\nfunction formatStep({\n  colorFns,\n  testStep,\n  printAttachments,\n}: IFormatStepRequest): string {\n  const {\n    name,\n    result: { status },\n    actionLocation,\n    attachments,\n  } = testStep\n  const colorFn = colorFns.forStatus(status)\n  const identifier = testStep.keyword + valueOrDefault(testStep.text, '')\n  let text = colorFn(`${CHARACTERS.get(status)} ${identifier}`)\n  if (doesHaveValue(name)) {\n    text += colorFn(` (${name})`)\n  }\n  if (doesHaveValue(actionLocation)) {\n    text += ` # ${colorFns.location(formatLocation(actionLocation))}`\n  }\n  text += '\\n'\n  if (doesHaveValue(testStep.argument)) {\n    const argumentsText = formatStepArgument(testStep.argument)\n    text += indentString(`${colorFn(argumentsText)}\\n`, 4)\n  }\n  if (valueOrDefault(printAttachments, true)) {\n    attachments.forEach(({ body, mediaType }) => {\n      const message = mediaType === 'text/plain' ? `: ${body}` : ''\n      text += indentString(`Attachment (${mediaType})${message}\\n`, 4)\n    })\n  }\n  const message = getStepMessage(testStep)\n  if (message !== '') {\n    text += `${indentString(colorFn(message), 4)}\\n`\n  }\n  return text\n}\n\nexport interface IFormatTestCaseAttemptRequest {\n  colorFns: IColorFns\n  testCaseAttempt: ITestCaseAttempt\n  snippetBuilder: StepDefinitionSnippetBuilder\n  supportCodeLibrary: ISupportCodeLibrary\n  printAttachments?: boolean\n}\n\nexport function formatTestCaseAttempt({\n  colorFns,\n  snippetBuilder,\n  supportCodeLibrary,\n  testCaseAttempt,\n  printAttachments,\n}: IFormatTestCaseAttemptRequest): string {\n  const parsed = parseTestCaseAttempt({\n    snippetBuilder,\n    testCaseAttempt,\n    supportCodeLibrary,\n  })\n  let text = `Scenario: ${parsed.testCase.name}`\n  text += getAttemptText(parsed.testCase.attempt, testCaseAttempt.willBeRetried)\n  text += ` # ${colorFns.location(\n    formatLocation(parsed.testCase.sourceLocation)\n  )}\\n`\n  parsed.testSteps.forEach((testStep) => {\n    text += formatStep({ colorFns, testStep, printAttachments })\n  })\n  return `${text}\\n`\n}\n\nfunction getAttemptText(attempt: number, willBeRetried: boolean): string {\n  if (attempt > 0 || willBeRetried) {\n    const numberStr = (attempt + 1).toString()\n    const retriedStr = willBeRetried ? ', retried' : ''\n    return ` (attempt ${numberStr}${retriedStr})`\n  }\n  return ''\n}\n"]}