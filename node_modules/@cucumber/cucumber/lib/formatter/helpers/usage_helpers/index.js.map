{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/formatter/helpers/usage_helpers/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { getPickleStepMap } from '../pickle_parser'\nimport { getGherkinStepMap } from '../gherkin_document_parser'\nimport * as messages from '@cucumber/messages'\nimport StepDefinition from '../../../models/step_definition'\nimport { doesHaveValue } from '../../../value_checker'\nimport EventDataCollector from '../event_data_collector'\n\nexport interface IUsageMatch {\n  duration?: messages.Duration\n  line: number\n  text: string\n  uri: string\n}\n\nexport interface IUsage {\n  code: string\n  line: number\n  matches: IUsageMatch[]\n  meanDuration?: messages.Duration\n  pattern: string\n  patternType: string\n  uri: string\n}\n\nexport interface IGetUsageRequest {\n  eventDataCollector: EventDataCollector\n  stepDefinitions: StepDefinition[]\n}\n\nfunction buildEmptyMapping(\n  stepDefinitions: StepDefinition[]\n): Record<string, IUsage> {\n  const mapping: Record<string, IUsage> = {}\n  stepDefinitions.forEach((stepDefinition) => {\n    mapping[stepDefinition.id] = {\n      code: stepDefinition.unwrappedCode.toString(),\n      line: stepDefinition.line,\n      pattern: stepDefinition.expression.source,\n      patternType: stepDefinition.expression.constructor.name,\n      matches: [],\n      uri: stepDefinition.uri,\n    }\n  })\n  return mapping\n}\n\nconst unexecutedStatuses: readonly messages.TestStepResultStatus[] = [\n  messages.TestStepResultStatus.AMBIGUOUS,\n  messages.TestStepResultStatus.SKIPPED,\n  messages.TestStepResultStatus.UNDEFINED,\n]\n\nfunction buildMapping({\n  stepDefinitions,\n  eventDataCollector,\n}: IGetUsageRequest): Record<string, IUsage> {\n  const mapping = buildEmptyMapping(stepDefinitions)\n  eventDataCollector.getTestCaseAttempts().forEach((testCaseAttempt) => {\n    const pickleStepMap = getPickleStepMap(testCaseAttempt.pickle)\n    const gherkinStepMap = getGherkinStepMap(testCaseAttempt.gherkinDocument)\n    testCaseAttempt.testCase.testSteps.forEach((testStep) => {\n      if (\n        doesHaveValue(testStep.pickleStepId) &&\n        testStep.stepDefinitionIds.length === 1\n      ) {\n        const stepDefinitionId = testStep.stepDefinitionIds[0]\n        const pickleStep = pickleStepMap[testStep.pickleStepId]\n        const gherkinStep = gherkinStepMap[pickleStep.astNodeIds[0]]\n        const match: IUsageMatch = {\n          line: gherkinStep.location.line,\n          text: pickleStep.text,\n          uri: testCaseAttempt.pickle.uri,\n        }\n        const { duration, status } = testCaseAttempt.stepResults[testStep.id]\n        if (!unexecutedStatuses.includes(status) && doesHaveValue(duration)) {\n          match.duration = duration\n        }\n        if (doesHaveValue(mapping[stepDefinitionId])) {\n          mapping[stepDefinitionId].matches.push(match)\n        }\n      }\n    })\n  })\n  return mapping\n}\n\nfunction normalizeDuration(duration?: messages.Duration): number {\n  if (duration == null) {\n    return Number.MIN_SAFE_INTEGER\n  }\n  return messages.TimeConversion.durationToMilliseconds(duration)\n}\n\nfunction buildResult(mapping: Record<string, IUsage>): IUsage[] {\n  return Object.keys(mapping)\n    .map((stepDefinitionId) => {\n      const { matches, ...rest } = mapping[stepDefinitionId]\n      const sortedMatches = matches.sort((a: IUsageMatch, b: IUsageMatch) => {\n        if (a.duration === b.duration) {\n          return a.text < b.text ? -1 : 1\n        }\n        return normalizeDuration(b.duration) - normalizeDuration(a.duration)\n      })\n      const result = { matches: sortedMatches, ...rest }\n      const durations: messages.Duration[] = matches\n        .filter((m) => m.duration != null)\n        .map((m) => m.duration)\n      if (durations.length > 0) {\n        const totalMilliseconds = durations.reduce(\n          (acc, x) => acc + messages.TimeConversion.durationToMilliseconds(x),\n          0\n        )\n        result.meanDuration = messages.TimeConversion.millisecondsToDuration(\n          totalMilliseconds / durations.length\n        )\n      }\n      return result\n    })\n    .sort(\n      (a: IUsage, b: IUsage) =>\n        normalizeDuration(b.meanDuration) - normalizeDuration(a.meanDuration)\n    )\n}\n\nexport function getUsage({\n  stepDefinitions,\n  eventDataCollector,\n}: IGetUsageRequest): IUsage[] {\n  const mapping = buildMapping({ stepDefinitions, eventDataCollector })\n  return buildResult(mapping)\n}\n"]}