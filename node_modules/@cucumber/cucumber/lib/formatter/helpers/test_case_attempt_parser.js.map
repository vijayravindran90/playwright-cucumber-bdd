{"version":3,"file":"test_case_attempt_parser.js","sourceRoot":"","sources":["../../../src/formatter/helpers/test_case_attempt_parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { getStepKeywordType, KeywordType } from './keyword_type'\nimport {\n  getGherkinScenarioLocationMap,\n  getGherkinStepMap,\n} from './gherkin_document_parser'\nimport { getPickleStepMap, getStepKeyword } from './pickle_parser'\nimport * as messages from '@cucumber/messages'\nimport { ITestCaseAttempt } from './event_data_collector'\nimport StepDefinitionSnippetBuilder from '../step_definition_snippet_builder'\nimport { ISupportCodeLibrary } from '../../support_code_library_builder/types'\nimport { doesHaveValue, valueOrDefault } from '../../value_checker'\nimport TestCaseHookDefinition from '../../models/test_case_hook_definition'\nimport { ILineAndUri } from '../../types'\nimport { TestStepResult } from '@cucumber/messages'\n\nexport interface IParsedTestStep {\n  actionLocation?: ILineAndUri\n  argument?: messages.PickleStepArgument\n  attachments: messages.Attachment[]\n  keyword: string\n  name?: string\n  result: messages.TestStepResult\n  snippet?: string\n  sourceLocation?: ILineAndUri\n  text?: string\n}\n\nexport interface IParsedTestCase {\n  attempt: number\n  name: string\n  sourceLocation?: ILineAndUri\n  worstTestStepResult: messages.TestStepResult\n}\n\nexport interface IParsedTestCaseAttempt {\n  testCase: IParsedTestCase\n  testSteps: IParsedTestStep[]\n}\n\ninterface IParseStepRequest {\n  isBeforeHook: boolean\n  gherkinStepMap: Record<string, messages.Step>\n  keyword: string\n  keywordType: KeywordType\n  pickleStep: messages.PickleStep\n  pickleUri: string\n  snippetBuilder: StepDefinitionSnippetBuilder\n  supportCodeLibrary: ISupportCodeLibrary\n  testStep: messages.TestStep\n  testStepResult: messages.TestStepResult\n  testStepAttachments: messages.Attachment[]\n}\n\nfunction parseStep({\n  isBeforeHook,\n  gherkinStepMap,\n  keyword,\n  keywordType,\n  pickleStep,\n  pickleUri,\n  snippetBuilder,\n  supportCodeLibrary,\n  testStep,\n  testStepResult,\n  testStepAttachments,\n}: IParseStepRequest): IParsedTestStep {\n  const out: IParsedTestStep = {\n    attachments: testStepAttachments,\n    keyword: doesHaveValue(testStep.pickleStepId)\n      ? keyword\n      : isBeforeHook\n      ? 'Before'\n      : 'After',\n    result: testStepResult,\n  }\n  if (doesHaveValue(testStep.hookId)) {\n    let hookDefinition: TestCaseHookDefinition\n    if (isBeforeHook) {\n      hookDefinition = supportCodeLibrary.beforeTestCaseHookDefinitions.find(\n        (x) => x.id === testStep.hookId\n      )\n    } else {\n      hookDefinition = supportCodeLibrary.afterTestCaseHookDefinitions.find(\n        (x) => x.id === testStep.hookId\n      )\n    }\n    out.actionLocation = {\n      uri: hookDefinition.uri,\n      line: hookDefinition.line,\n    }\n    out.name = hookDefinition.name\n  }\n  if (\n    doesHaveValue(testStep.stepDefinitionIds) &&\n    testStep.stepDefinitionIds.length === 1\n  ) {\n    const stepDefinition = supportCodeLibrary.stepDefinitions.find(\n      (x) => x.id === testStep.stepDefinitionIds[0]\n    )\n    out.actionLocation = {\n      uri: stepDefinition.uri,\n      line: stepDefinition.line,\n    }\n  }\n  if (doesHaveValue(testStep.pickleStepId)) {\n    out.sourceLocation = {\n      uri: pickleUri,\n      line: gherkinStepMap[pickleStep.astNodeIds[0]].location.line,\n    }\n    out.text = pickleStep.text\n    if (doesHaveValue(pickleStep.argument)) {\n      out.argument = pickleStep.argument\n    }\n  }\n  if (testStepResult.status === messages.TestStepResultStatus.UNDEFINED) {\n    out.snippet = snippetBuilder.build({ keywordType, pickleStep })\n  }\n  return out\n}\n\nexport interface IParseTestCaseAttemptRequest {\n  testCaseAttempt: ITestCaseAttempt\n  snippetBuilder: StepDefinitionSnippetBuilder\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\n// Converts a testCaseAttempt into a json object with all data needed for\n// displaying it in a pretty format\nexport function parseTestCaseAttempt({\n  testCaseAttempt,\n  snippetBuilder,\n  supportCodeLibrary,\n}: IParseTestCaseAttemptRequest): IParsedTestCaseAttempt {\n  const { testCase, pickle, gherkinDocument } = testCaseAttempt\n  const gherkinStepMap = getGherkinStepMap(gherkinDocument)\n  const gherkinScenarioLocationMap =\n    getGherkinScenarioLocationMap(gherkinDocument)\n  const pickleStepMap = getPickleStepMap(pickle)\n  const relativePickleUri = pickle.uri\n  const parsedTestCase: IParsedTestCase = {\n    attempt: testCaseAttempt.attempt,\n    name: pickle.name,\n    sourceLocation: {\n      uri: relativePickleUri,\n      line: gherkinScenarioLocationMap[\n        pickle.astNodeIds[pickle.astNodeIds.length - 1]\n      ].line,\n    },\n    worstTestStepResult: testCaseAttempt.worstTestStepResult,\n  }\n  const parsedTestSteps: IParsedTestStep[] = []\n  let isBeforeHook = true\n  let previousKeywordType = KeywordType.Precondition\n\n  testCase.testSteps.forEach((testStep) => {\n    const testStepResult =\n      testCaseAttempt.stepResults[testStep.id] || new TestStepResult()\n\n    isBeforeHook = isBeforeHook && doesHaveValue(testStep.hookId)\n\n    let keyword, keywordType, pickleStep\n    if (doesHaveValue(testStep.pickleStepId)) {\n      pickleStep = pickleStepMap[testStep.pickleStepId]\n      keyword = getStepKeyword({ pickleStep, gherkinStepMap })\n      keywordType = getStepKeywordType({\n        keyword,\n        language: gherkinDocument.feature.language,\n        previousKeywordType,\n      })\n    }\n    const parsedStep = parseStep({\n      isBeforeHook,\n      gherkinStepMap,\n      keyword,\n      keywordType,\n      pickleStep,\n      pickleUri: relativePickleUri,\n      snippetBuilder,\n      supportCodeLibrary,\n      testStep,\n      testStepResult,\n      testStepAttachments: valueOrDefault(\n        testCaseAttempt.stepAttachments[testStep.id],\n        []\n      ),\n    })\n    parsedTestSteps.push(parsedStep)\n    previousKeywordType = keywordType\n  })\n  return {\n    testCase: parsedTestCase,\n    testSteps: parsedTestSteps,\n  }\n}\n"]}