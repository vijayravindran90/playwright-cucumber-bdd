{"version":3,"file":"plugin_manager.js","sourceRoot":"","sources":["../../src/plugin/plugin_manager.ts"],"names":[],"mappings":";;;AAQA,MAAa,aAAa;IAIxB,YAAoB,SAAmB;QAAnB,cAAS,GAAT,SAAS,CAAU;QAH/B,aAAQ,GAAoB,EAAE,OAAO,EAAE,EAAE,EAAE,CAAA;QAC3C,eAAU,GAAoB,EAAE,CAAA;IAEE,CAAC;IAEnC,KAAK,CAAC,QAAQ,CACpB,KAAQ,EACR,OAAyC;QAEzC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,IAAI,CACR,MAAe,EACf,aAA0B,EAC1B,WAA4B;QAE5B,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;YACrC,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC;gBAC/B,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;gBAC5B,MAAM;gBACN,aAAa;gBACb,WAAW;aACZ,CAAC,CAAA;YACF,IAAI,SAAS,EAAE;gBACb,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;aAChC;SACF;IACH,CAAC;IAED,IAAI,CAA+B,KAAQ,EAAE,KAAsB;QACjE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;IAC3D,CAAC;IAED,KAAK,CAAC,OAAO;QACX,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;YACvC,MAAM,SAAS,EAAE,CAAA;SAClB;IACH,CAAC;CACF;AAxCD,sCAwCC","sourcesContent":["import { Plugin, PluginCleanup, PluginEvents } from './types'\nimport { IRunEnvironment, IRunOptions } from '../api'\nimport { ILogger } from '../logger'\n\ntype HandlerRegistry = {\n  [K in keyof PluginEvents]: Array<(value: PluginEvents[K]) => void>\n}\n\nexport class PluginManager {\n  private handlers: HandlerRegistry = { message: [] }\n  private cleanupFns: PluginCleanup[] = []\n\n  constructor(private pluginFns: Plugin[]) {}\n\n  private async register<K extends keyof PluginEvents>(\n    event: K,\n    handler: (value: PluginEvents[K]) => void\n  ) {\n    this.handlers[event].push(handler)\n  }\n\n  async init(\n    logger: ILogger,\n    configuration: IRunOptions,\n    environment: IRunEnvironment\n  ) {\n    for (const pluginFn of this.pluginFns) {\n      const cleanupFn = await pluginFn({\n        on: this.register.bind(this),\n        logger,\n        configuration,\n        environment,\n      })\n      if (cleanupFn) {\n        this.cleanupFns.push(cleanupFn)\n      }\n    }\n  }\n\n  emit<K extends keyof PluginEvents>(event: K, value: PluginEvents[K]): void {\n    this.handlers[event].forEach((handler) => handler(value))\n  }\n\n  async cleanup(): Promise<void> {\n    for (const cleanupFn of this.cleanupFns) {\n      await cleanupFn()\n    }\n  }\n}\n"]}