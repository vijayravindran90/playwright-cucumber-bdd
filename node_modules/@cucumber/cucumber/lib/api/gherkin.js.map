{"version":3,"file":"gherkin.js","sourceRoot":"","sources":["../../src/api/gherkin.ts"],"names":[],"mappings":";;;;;;AAAA,+DAGkC;AASlC,2DAA+D;AAC/D,qEAA2C;AAC3C,4CAA6C;AAUtC,KAAK,UAAU,2BAA2B,CAAC,EAChD,KAAK,EACL,GAAG,EACH,MAAM,EACN,sBAAsB,EACtB,YAAY,EACZ,WAAW,EACX,UAAU,GASX;IAIC,MAAM,YAAY,GAAG,IAAI,qBAAY,EAAE,CAAA;IACvC,MAAM,WAAW,GAAiB,EAAE,CAAA;IACpC,MAAM,gBAAgB,CACpB,YAAY,EACZ;QACE,KAAK;QACL,UAAU,EAAE,GAAG;QACf,cAAc,EAAE,WAAW,CAAC,cAAc;KAC3C,EACD,CAAC,QAAQ,EAAE,EAAE;QACX,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAC7B,IAAI,QAAQ,CAAC,UAAU,EAAE;YACvB,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;SACtC;QACD,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,QAAQ,CAAC,CAAA;IACxB,CAAC,CACF,CAAA;IACD,MAAM,YAAY,GAAG,IAAI,uBAAY,CAAC;QACpC,GAAG;QACH,YAAY,EAAE,sBAAsB;QACpC,KAAK,EAAE,WAAW,CAAC,KAAK;QACxB,aAAa,EAAE,WAAW,CAAC,aAAa;KACzC,CAAC,CAAA;IACF,MAAM,eAAe,GAAyB,YAAY;SACvD,UAAU,EAAE;SACZ,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE;QACjB,MAAM,eAAe,GAAG,YAAY;aACjC,mBAAmB,EAAE;aACrB,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,CAAA;QACxC,OAAO,YAAY,CAAC,OAAO,CAAC,EAAE,eAAe,EAAE,MAAM,EAAE,CAAC,CAAA;IAC1D,CAAC,CAAC;SACD,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QACd,MAAM,eAAe,GAAG,YAAY;aACjC,mBAAmB,EAAE;aACrB,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,CAAA;QACxC,MAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CACvC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAChD,CAAA;QACD,OAAO;YACL,eAAe;YACf,QAAQ;YACR,MAAM;SACP,CAAA;IACH,CAAC,CAAC,CAAA;IACJ,IAAA,sBAAY,EAAC,eAAe,EAAE,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;IACxD,OAAO;QACL,eAAe;QACf,WAAW;KACZ,CAAA;AACH,CAAC;AArED,kEAqEC;AAED,KAAK,UAAU,gBAAgB,CAC7B,KAAe,EACf,OAA8B,EAC9B,UAAwC;IAExC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,MAAM,oBAAoB,GAAG,gCAAc,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;QACrE,oBAAoB,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;QAC3C,oBAAoB,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;QACvC,oBAAoB,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;IAC1C,CAAC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import {\n  GherkinStreams,\n  IGherkinStreamOptions,\n} from '@cucumber/gherkin-streams'\nimport {\n  Envelope,\n  GherkinDocument,\n  IdGenerator,\n  Location,\n  ParseError,\n  Pickle,\n} from '@cucumber/messages'\nimport { Query as GherkinQuery } from '@cucumber/gherkin-utils'\nimport PickleFilter from '../pickle_filter'\nimport { orderPickles } from '../cli/helpers'\nimport { ISourcesCoordinates } from './types'\nimport { ILogger } from '../logger'\n\ninterface PickleWithDocument {\n  gherkinDocument: GherkinDocument\n  location: Location\n  pickle: Pickle\n}\n\nexport async function getFilteredPicklesAndErrors({\n  newId,\n  cwd,\n  logger,\n  unexpandedFeaturePaths,\n  featurePaths,\n  coordinates,\n  onEnvelope,\n}: {\n  newId: IdGenerator.NewId\n  cwd: string\n  logger: ILogger\n  unexpandedFeaturePaths: string[]\n  featurePaths: string[]\n  coordinates: ISourcesCoordinates\n  onEnvelope?: (envelope: Envelope) => void\n}): Promise<{\n  filteredPickles: PickleWithDocument[]\n  parseErrors: ParseError[]\n}> {\n  const gherkinQuery = new GherkinQuery()\n  const parseErrors: ParseError[] = []\n  await gherkinFromPaths(\n    featurePaths,\n    {\n      newId,\n      relativeTo: cwd,\n      defaultDialect: coordinates.defaultDialect,\n    },\n    (envelope) => {\n      gherkinQuery.update(envelope)\n      if (envelope.parseError) {\n        parseErrors.push(envelope.parseError)\n      }\n      onEnvelope?.(envelope)\n    }\n  )\n  const pickleFilter = new PickleFilter({\n    cwd,\n    featurePaths: unexpandedFeaturePaths,\n    names: coordinates.names,\n    tagExpression: coordinates.tagExpression,\n  })\n  const filteredPickles: PickleWithDocument[] = gherkinQuery\n    .getPickles()\n    .filter((pickle) => {\n      const gherkinDocument = gherkinQuery\n        .getGherkinDocuments()\n        .find((doc) => doc.uri === pickle.uri)\n      return pickleFilter.matches({ gherkinDocument, pickle })\n    })\n    .map((pickle) => {\n      const gherkinDocument = gherkinQuery\n        .getGherkinDocuments()\n        .find((doc) => doc.uri === pickle.uri)\n      const location = gherkinQuery.getLocation(\n        pickle.astNodeIds[pickle.astNodeIds.length - 1]\n      )\n      return {\n        gherkinDocument,\n        location,\n        pickle,\n      }\n    })\n  orderPickles(filteredPickles, coordinates.order, logger)\n  return {\n    filteredPickles,\n    parseErrors,\n  }\n}\n\nasync function gherkinFromPaths(\n  paths: string[],\n  options: IGherkinStreamOptions,\n  onEnvelope: (envelope: Envelope) => void\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const gherkinMessageStream = GherkinStreams.fromPaths(paths, options)\n    gherkinMessageStream.on('data', onEnvelope)\n    gherkinMessageStream.on('end', resolve)\n    gherkinMessageStream.on('error', reject)\n  })\n}\n"]}