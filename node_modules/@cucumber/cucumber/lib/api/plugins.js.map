{"version":3,"file":"plugins.js","sourceRoot":"","sources":["../../src/api/plugins.ts"],"names":[],"mappings":";;;;;;AAAA,sCAAiD;AACjD,yDAAsC;AAItC,MAAM,gBAAgB,GAA2B;IAC/C,OAAO,EAAE,iBAAa;CACvB,CAAA;AAEM,KAAK,UAAU,iBAAiB,CACrC,MAAe,EACf,aAA0B,EAC1B,WAA4B;IAE5B,6CAA6C;IAC7C,MAAM,aAAa,GAAG,IAAI,sBAAa,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAA;IACxE,MAAM,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,aAAa,EAAE,WAAW,CAAC,CAAA;IAC5D,OAAO,aAAa,CAAA;AACtB,CAAC;AATD,8CASC","sourcesContent":["import { Plugin, PluginManager } from '../plugin'\nimport publishPlugin from '../publish'\nimport { IRunEnvironment, IRunOptions } from './types'\nimport { ILogger } from '../logger'\n\nconst INTERNAL_PLUGINS: Record<string, Plugin> = {\n  publish: publishPlugin,\n}\n\nexport async function initializePlugins(\n  logger: ILogger,\n  configuration: IRunOptions,\n  environment: IRunEnvironment\n): Promise<PluginManager> {\n  // eventually we'll load plugin packages here\n  const pluginManager = new PluginManager(Object.values(INTERNAL_PLUGINS))\n  await pluginManager.init(logger, configuration, environment)\n  return pluginManager\n}\n"]}