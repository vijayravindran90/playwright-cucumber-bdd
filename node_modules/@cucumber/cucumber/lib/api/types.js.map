{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/api/types.ts"],"names":[],"mappings":"","sourcesContent":["import { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport { FormatOptions, IPublishConfig } from '../formatter'\nimport { PickleOrder } from '../models/pickle_order'\nimport { IRuntimeOptions } from '../runtime'\nimport { IConfiguration } from '../configuration'\nimport { Writable } from 'stream'\n\n/**\n * @public\n */\nexport interface ILoadConfigurationOptions {\n  /**\n   * Path to load configuration file from (defaults to `cucumber.(js|cjs|mjs|json)` if omitted).\n   */\n  file?: string\n  /**\n   * Zero or more profile names from which to source configuration (if omitted or empty, the `default` profile will be used).\n   */\n  profiles?: string[]\n  /**\n   * Ad-hoc configuration options to be applied over the top of whatever is loaded from the configuration file/profiles.\n   */\n  provided?: Partial<IConfiguration>\n}\n\n/**\n * @public\n */\nexport interface IResolvedConfiguration {\n  /**\n   * The final flat configuration object resolved from the configuration file/profiles plus any extra provided.\n   */\n  useConfiguration: IConfiguration\n  /**\n   * The format that can be passed into `runCucumber`.\n   */\n  runConfiguration: IRunConfiguration\n}\n\n/**\n * @public\n */\nexport interface ISourcesCoordinates {\n  defaultDialect: string\n  paths: string[]\n  names: string[]\n  tagExpression: string\n  order: PickleOrder\n}\n\n/**\n * @public\n */\nexport interface IPlannedPickle {\n  name: string\n  uri: string\n  location: {\n    line: number\n    column?: number\n  }\n}\n\n/**\n * @public\n */\nexport interface ISourcesError {\n  uri: string\n  location: {\n    line: number\n    column?: number\n  }\n  message: string\n}\n\n/**\n * @public\n */\nexport interface ILoadSourcesResult {\n  plan: IPlannedPickle[]\n  errors: ISourcesError[]\n}\n\n/**\n * @public\n */\nexport interface ISupportCodeCoordinates {\n  requireModules: string[]\n  requirePaths: string[]\n  importPaths: string[]\n}\n\n/**\n * @public\n */\nexport interface ILoadSupportOptions {\n  sources: ISourcesCoordinates\n  support: ISupportCodeCoordinates\n}\n\n/**\n * @public\n */\nexport interface IRunOptionsRuntime extends IRuntimeOptions {\n  parallel: number\n}\n\n/**\n * @public\n */\nexport interface IRunOptionsFormats {\n  stdout: string\n  files: Record<string, string>\n  publish: IPublishConfig | false\n  options: FormatOptions\n}\n\n/**\n * @public\n */\nexport interface IRunConfiguration {\n  sources: ISourcesCoordinates\n  support: ISupportCodeCoordinates\n  runtime: IRunOptionsRuntime\n  formats: IRunOptionsFormats\n}\n\n/**\n * @public\n */\nexport type ISupportCodeCoordinatesOrLibrary =\n  | ISupportCodeCoordinates\n  | ISupportCodeLibrary\n\n/**\n * @public\n */\nexport interface IRunOptions {\n  sources: ISourcesCoordinates\n  support: ISupportCodeCoordinatesOrLibrary\n  runtime: IRunOptionsRuntime\n  formats: IRunOptionsFormats\n}\n\n/**\n * Contextual data about the project environment.\n *\n * @public\n */\nexport interface IRunEnvironment {\n  /**\n   * Working directory for the project (defaults to `process.cwd()` if omitted).\n   */\n  cwd?: string\n  /**\n   * Writable stream where the test run's main output is written (defaults to `process.stdout` if omitted).\n   */\n  stdout?: Writable\n  /**\n   * Writable stream where the test run's warning/error output is written (defaults to `process.stderr` if omitted).\n   */\n  stderr?: Writable\n  /**\n   * Environment variables (defaults to `process.env` if omitted).\n   */\n  env?: NodeJS.ProcessEnv\n  /**\n   * Whether debug logging is enabled.\n   */\n  debug?: boolean\n}\n\n/**\n * Result of a Cucumber test run.\n *\n * @public\n */\nexport interface IRunResult {\n  /**\n   * Whether the test run was overall successful i.e. no failed scenarios. The exact meaning can vary based on the `strict` configuration option.\n   */\n  success: boolean\n  /**\n   * The support code library that was used in the test run; can be reused in subsequent `runCucumber` calls.\n   */\n  support: ISupportCodeLibrary\n}\n"]}