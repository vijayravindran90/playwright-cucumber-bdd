{"version":3,"file":"from_file.js","sourceRoot":"","sources":["../../src/configuration/from_file.ts"],"names":[],"mappings":";;;;;;AAAA,8DAAoC;AACpC,gDAAuB;AACvB,6BAAmC;AAEnC,iEAA4D;AAC5D,gEAAsC;AACtC,iDAA4C;AAG5C,8DAA8D;AAC9D,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AAEpC,KAAK,UAAU,QAAQ,CAC5B,MAAe,EACf,GAAW,EACX,IAAY,EACZ,WAAqB,EAAE;IAEvB,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;IAC7C,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;QACxB,MAAM,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAA;QAChE,WAAW,CAAC,OAAO,GAAG,EAAE,CAAA;KACzB;IACD,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,MAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAA;QAC5D,QAAQ,GAAG,CAAC,SAAS,CAAC,CAAA;KACvB;IACD,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;IAC5C,QAAQ,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;QAC9B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,sBAAsB,UAAU,iBAAiB,CAAC,CAAA;SACnE;IACH,CAAC,CAAC,CAAA;IACF,OAAO,IAAA,0CAAmB,EACxB,EAAE,EACF,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAC7B,oBAAoB,CAAC,MAAM,EAAE,UAAU,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAClE,CACF,CAAA;AACH,CAAC;AA3BD,4BA2BC;AAED,KAAK,UAAU,QAAQ,CACrB,GAAW,EACX,IAAY;IAEZ,MAAM,QAAQ,GAAW,cAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;IAC7C,IAAI,WAAW,CAAA;IACf,IAAI;QACF,8DAA8D;QAC9D,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;KAChC;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAAE;YACpC,WAAW,GAAG,MAAM,QAAQ,CAAC,IAAA,mBAAa,EAAC,QAAQ,CAAC,CAAC,CAAA;SACtD;aAAM;YACL,MAAM,KAAK,CAAA;SACZ;KACF;IACD,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;QACnC,MAAM,IAAI,KAAK,CAAC,sBAAsB,QAAQ,4BAA4B,CAAC,CAAA;KAC5E;IACD,OAAO,WAAW,CAAA;AACpB,CAAC;AAED,SAAS,oBAAoB,CAC3B,MAAe,EACf,IAAY,EACZ,UAAe;IAEf,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAClC,MAAM,CAAC,KAAK,CAAC,YAAY,IAAI,sCAAsC,CAAC,CAAA;QACpE,MAAM,EAAE,aAAa,EAAE,GAAG,qBAAU,CAAC,KAAK,CAAC;YACzC,MAAM;YACN,aAAa;YACb,GAAG,IAAA,qBAAU,EAAC,UAAU,CAAC;SAC1B,CAAC,CAAA;QACF,OAAO,aAAa,CAAA;KACrB;IACD,IAAI;QACF,OAAO,IAAA,0BAAW,EAAC,UAAU,CAAC,CAAA;KAC/B;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CACb,sBAAsB,IAAI,+BAA+B,KAAK,CAAC,MAAM,CAAC,IAAI,CACxE,GAAG,CACJ,EAAE,CACJ,CAAA;KACF;AACH,CAAC","sourcesContent":["import stringArgv from 'string-argv'\nimport path from 'path'\nimport { pathToFileURL } from 'url'\nimport { IConfiguration } from './types'\nimport { mergeConfigurations } from './merge_configurations'\nimport ArgvParser from './argv_parser'\nimport { checkSchema } from './check_schema'\nimport { ILogger } from '../logger'\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { importer } = require('../importer')\n\nexport async function fromFile(\n  logger: ILogger,\n  cwd: string,\n  file: string,\n  profiles: string[] = []\n): Promise<Partial<IConfiguration>> {\n  const definitions = await loadFile(cwd, file)\n  if (!definitions.default) {\n    logger.debug('No default profile defined in configuration file')\n    definitions.default = {}\n  }\n  if (profiles.length < 1) {\n    logger.debug('No profiles specified; using default profile')\n    profiles = ['default']\n  }\n  const definedKeys = Object.keys(definitions)\n  profiles.forEach((profileKey) => {\n    if (!definedKeys.includes(profileKey)) {\n      throw new Error(`Requested profile \"${profileKey}\" doesn't exist`)\n    }\n  })\n  return mergeConfigurations(\n    {},\n    ...profiles.map((profileKey) =>\n      extractConfiguration(logger, profileKey, definitions[profileKey])\n    )\n  )\n}\n\nasync function loadFile(\n  cwd: string,\n  file: string\n): Promise<Record<string, any>> {\n  const filePath: string = path.join(cwd, file)\n  let definitions\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    definitions = require(filePath)\n  } catch (error) {\n    if (error.code === 'ERR_REQUIRE_ESM') {\n      definitions = await importer(pathToFileURL(filePath))\n    } else {\n      throw error\n    }\n  }\n  if (typeof definitions !== 'object') {\n    throw new Error(`Configuration file ${filePath} does not export an object`)\n  }\n  return definitions\n}\n\nfunction extractConfiguration(\n  logger: ILogger,\n  name: string,\n  definition: any\n): Partial<IConfiguration> {\n  if (typeof definition === 'string') {\n    logger.debug(`Profile \"${name}\" value is a string; parsing as argv`)\n    const { configuration } = ArgvParser.parse([\n      'node',\n      'cucumber-js',\n      ...stringArgv(definition),\n    ])\n    return configuration\n  }\n  try {\n    return checkSchema(definition)\n  } catch (error) {\n    throw new Error(\n      `Requested profile \"${name}\" failed schema validation: ${error.errors.join(\n        ' '\n      )}`\n    )\n  }\n}\n"]}