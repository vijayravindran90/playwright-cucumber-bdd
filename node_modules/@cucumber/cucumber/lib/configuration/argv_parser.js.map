{"version":3,"file":"argv_parser.js","sourceRoot":"","sources":["../../src/configuration/argv_parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command } from 'commander'\nimport merge from 'lodash.merge'\nimport { dialects } from '@cucumber/gherkin'\nimport Formatters from '../formatter/helpers/formatters'\nimport { version } from '../version'\nimport { IConfiguration } from './types'\n\nexport interface IParsedArgvOptions {\n  config?: string\n  i18nKeywords?: string\n  i18nLanguages?: boolean\n  profile: string[]\n}\n\nexport interface IParsedArgv {\n  options: IParsedArgvOptions\n  configuration: Partial<IConfiguration>\n}\n\ntype IRawArgvOptions = Partial<Omit<IConfiguration, 'paths'>> &\n  IParsedArgvOptions\n\nconst ArgvParser = {\n  collect<T>(val: T, memo: T[] = []): T[] {\n    if (val) {\n      return [...memo, val]\n    }\n    return undefined\n  },\n\n  mergeJson(option: string): (str: string, memo?: object) => object {\n    return function (str: string, memo: object = {}) {\n      let val: object\n      try {\n        val = JSON.parse(str)\n      } catch (error) {\n        const e: Error = error\n        throw new Error(`${option} passed invalid JSON: ${e.message}: ${str}`)\n      }\n      if (typeof val !== 'object' || Array.isArray(val)) {\n        throw new Error(`${option} must be passed JSON of an object: ${str}`)\n      }\n      return merge(memo, val)\n    }\n  },\n\n  mergeTags(value: string, memo?: string): string {\n    return memo ? `${memo} and (${value})` : `(${value})`\n  },\n\n  validateCountOption(value: string, optionName: string): number {\n    const numericValue = parseInt(value)\n    if (isNaN(numericValue) || numericValue < 0) {\n      throw new Error(`${optionName} must be a non negative integer`)\n    }\n    return numericValue\n  },\n\n  validateLanguage(value: string): string {\n    if (!Object.keys(dialects).includes(value)) {\n      throw new Error(`Unsupported ISO 639-1: ${value}`)\n    }\n    return value\n  },\n\n  parse(argv: string[]): IParsedArgv {\n    const program = new Command('cucumber-js')\n\n    program\n      .storeOptionsAsProperties(false)\n      .usage('[options] [<GLOB|DIR|FILE[:LINE]>...]')\n      .version(version, '-v, --version')\n      .option('-b, --backtrace', 'show full backtrace for errors')\n      .option('-c, --config <PATH>', 'specify configuration file')\n      .option('-d, --dry-run', 'invoke formatters without executing steps')\n      .option(\n        '--exit, --force-exit',\n        'force shutdown of the event loop when the test run has finished: cucumber will call process.exit'\n      )\n      .option('--fail-fast', 'abort the run on first failure')\n      .option(\n        '-f, --format <TYPE[:PATH]>',\n        'specify the output format, optionally supply PATH to redirect formatter output (repeatable).  Available formats:\\n' +\n          Formatters.buildFormattersDocumentationString(),\n        ArgvParser.collect\n      )\n      .option(\n        '--format-options <JSON>',\n        'provide options for formatters (repeatable)',\n        ArgvParser.mergeJson('--format-options')\n      )\n      .option(\n        '--i18n-keywords <ISO 639-1>',\n        'list language keywords',\n        ArgvParser.validateLanguage\n      )\n      .option('--i18n-languages', 'list languages')\n      .option(\n        '-i, --import <GLOB|DIR|FILE>',\n        'import files before executing features (repeatable)',\n        ArgvParser.collect\n      )\n      .option(\n        '--language <ISO 639-1>',\n        'provide the default language for feature files'\n      )\n      .option(\n        '--name <REGEXP>',\n        'only execute the scenarios with name matching the expression (repeatable)',\n        ArgvParser.collect\n      )\n\n      .option(\n        '--order <TYPE[:SEED]>',\n        'run scenarios in the specified order. Type should be `defined` or `random`'\n      )\n      .option(\n        '-p, --profile <NAME>',\n        'specify the profile to use (repeatable)',\n        ArgvParser.collect,\n        []\n      )\n      .option(\n        '--parallel <NUMBER_OF_WORKERS>',\n        'run in parallel with the given number of workers',\n        (val) => ArgvParser.validateCountOption(val, '--parallel')\n      )\n      .option('--publish', 'Publish a report to https://reports.cucumber.io')\n      .option(\n        '--publish-quiet',\n        \"Don't print information banner about publishing reports\"\n      )\n      .option(\n        '-r, --require <GLOB|DIR|FILE>',\n        'require files before executing features (repeatable)',\n        ArgvParser.collect\n      )\n      .option(\n        '--require-module <NODE_MODULE>',\n        'require node modules before requiring files (repeatable)',\n        ArgvParser.collect\n      )\n      .option(\n        '--retry <NUMBER_OF_RETRIES>',\n        'specify the number of times to retry failing test cases (default: 0)',\n        (val) => ArgvParser.validateCountOption(val, '--retry')\n      )\n      .option(\n        '--retry-tag-filter <EXPRESSION>',\n        `only retries the features or scenarios with tags matching the expression (repeatable).\n        This option requires '--retry' to be specified.`,\n        ArgvParser.mergeTags\n      )\n      .option('--strict', 'fail if there are pending steps')\n      .option('--no-strict', 'succeed even if there are pending steps')\n      .option(\n        '-t, --tags <EXPRESSION>',\n        'only execute the features or scenarios with tags matching the expression (repeatable)',\n        ArgvParser.mergeTags\n      )\n      .option(\n        '--world-parameters <JSON>',\n        'provide parameters that will be passed to the world constructor (repeatable)',\n        ArgvParser.mergeJson('--world-parameters')\n      )\n\n    program.addHelpText(\n      'afterAll',\n      'For more details please visit https://github.com/cucumber/cucumber-js/blob/main/docs/cli.md'\n    )\n\n    program.parse(argv)\n    const {\n      config,\n      i18nKeywords,\n      i18nLanguages,\n      profile,\n      ...regularStuff\n    }: IRawArgvOptions = program.opts()\n    const configuration: Partial<IConfiguration> = regularStuff\n    if (program.args.length > 0) {\n      configuration.paths = program.args\n    }\n\n    return {\n      options: {\n        config,\n        i18nKeywords,\n        i18nLanguages,\n        profile,\n      },\n      configuration,\n    }\n  },\n}\n\nexport default ArgvParser\n"]}