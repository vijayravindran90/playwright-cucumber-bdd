{"version":3,"file":"coordinator.js","sourceRoot":"","sources":["../../../src/runtime/parallel/coordinator.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcess, fork } from 'child_process'\nimport path from 'path'\nimport { retriesForPickle, shouldCauseFailure } from '../helpers'\nimport * as messages from '@cucumber/messages'\nimport { EventEmitter } from 'events'\nimport { EventDataCollector } from '../../formatter/helpers'\nimport { IRuntime, IRuntimeOptions } from '..'\nimport { ISupportCodeLibrary } from '../../support_code_library_builder/types'\nimport { ICoordinatorReport, IWorkerCommand } from './command_types'\nimport { doesHaveValue } from '../../value_checker'\nimport { ITestRunStopwatch, RealTestRunStopwatch } from '../stopwatch'\nimport { assembleTestCases, IAssembledTestCases } from '../assemble_test_cases'\nimport { IdGenerator } from '@cucumber/messages'\nimport { ILogger } from '../../logger'\n\nconst runWorkerPath = path.resolve(__dirname, 'run_worker.js')\n\nexport interface INewCoordinatorOptions {\n  cwd: string\n  logger: ILogger\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  options: IRuntimeOptions\n  newId: IdGenerator.NewId\n  pickleIds: string[]\n  supportCodeLibrary: ISupportCodeLibrary\n  requireModules: string[]\n  requirePaths: string[]\n  importPaths: string[]\n  numberOfWorkers: number\n}\n\nconst enum WorkerState {\n  'idle',\n  'closed',\n  'running',\n  'new',\n}\n\ninterface IWorker {\n  state: WorkerState\n  process: ChildProcess\n  id: string\n}\n\ninterface IPicklePlacement {\n  index: number\n  pickle: messages.Pickle\n}\n\nexport default class Coordinator implements IRuntime {\n  private readonly cwd: string\n  private readonly eventBroadcaster: EventEmitter\n  private readonly eventDataCollector: EventDataCollector\n  private readonly stopwatch: ITestRunStopwatch\n  private onFinish: (success: boolean) => void\n  private readonly options: IRuntimeOptions\n  private readonly newId: IdGenerator.NewId\n  private readonly pickleIds: string[]\n  private assembledTestCases: IAssembledTestCases\n  private inProgressPickles: Record<string, messages.Pickle>\n  private workers: Record<string, IWorker>\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private readonly requireModules: string[]\n  private readonly requirePaths: string[]\n  private readonly importPaths: string[]\n  private readonly numberOfWorkers: number\n  private readonly logger: ILogger\n  private success: boolean\n  private idleInterventions: number\n\n  constructor({\n    cwd,\n    logger,\n    eventBroadcaster,\n    eventDataCollector,\n    pickleIds,\n    options,\n    newId,\n    supportCodeLibrary,\n    requireModules,\n    requirePaths,\n    importPaths,\n    numberOfWorkers,\n  }: INewCoordinatorOptions) {\n    this.cwd = cwd\n    this.logger = logger\n    this.eventBroadcaster = eventBroadcaster\n    this.eventDataCollector = eventDataCollector\n    this.stopwatch = new RealTestRunStopwatch()\n    this.options = options\n    this.newId = newId\n    this.supportCodeLibrary = supportCodeLibrary\n    this.requireModules = requireModules\n    this.requirePaths = requirePaths\n    this.importPaths = importPaths\n    this.pickleIds = Array.from(pickleIds)\n    this.numberOfWorkers = numberOfWorkers\n    this.success = true\n    this.workers = {}\n    this.inProgressPickles = {}\n    this.idleInterventions = 0\n  }\n\n  parseWorkerMessage(worker: IWorker, message: ICoordinatorReport): void {\n    if (message.ready) {\n      worker.state = WorkerState.idle\n      this.awakenWorkers(worker)\n    } else if (doesHaveValue(message.jsonEnvelope)) {\n      const envelope = messages.parseEnvelope(message.jsonEnvelope)\n      this.eventBroadcaster.emit('envelope', envelope)\n      if (doesHaveValue(envelope.testCaseFinished)) {\n        delete this.inProgressPickles[worker.id]\n        this.parseTestCaseResult(envelope.testCaseFinished)\n      }\n    } else {\n      throw new Error(\n        `Unexpected message from worker: ${JSON.stringify(message)}`\n      )\n    }\n  }\n\n  awakenWorkers(triggeringWorker: IWorker): void {\n    Object.values(this.workers).forEach((worker) => {\n      if (worker.state === WorkerState.idle) {\n        this.giveWork(worker)\n      }\n      return worker.state !== WorkerState.idle\n    })\n\n    if (\n      Object.keys(this.inProgressPickles).length == 0 &&\n      this.pickleIds.length > 0\n    ) {\n      this.giveWork(triggeringWorker, true)\n      this.idleInterventions++\n    }\n  }\n\n  startWorker(id: string, total: number): void {\n    const workerProcess = fork(runWorkerPath, [], {\n      cwd: this.cwd,\n      env: {\n        ...process.env,\n        CUCUMBER_PARALLEL: 'true',\n        CUCUMBER_TOTAL_WORKERS: total.toString(),\n        CUCUMBER_WORKER_ID: id,\n      },\n      stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n    })\n    const worker = { state: WorkerState.new, process: workerProcess, id }\n    this.workers[id] = worker\n    worker.process.on('message', (message: ICoordinatorReport) => {\n      this.parseWorkerMessage(worker, message)\n    })\n    worker.process.on('close', (exitCode) => {\n      worker.state = WorkerState.closed\n      this.onWorkerProcessClose(exitCode)\n    })\n    const initializeCommand: IWorkerCommand = {\n      initialize: {\n        filterStacktraces: this.options.filterStacktraces,\n        requireModules: this.requireModules,\n        requirePaths: this.requirePaths,\n        importPaths: this.importPaths,\n        supportCodeIds: {\n          stepDefinitionIds: this.supportCodeLibrary.stepDefinitions.map(\n            (s) => s.id\n          ),\n          beforeTestCaseHookDefinitionIds:\n            this.supportCodeLibrary.beforeTestCaseHookDefinitions.map(\n              (h) => h.id\n            ),\n          afterTestCaseHookDefinitionIds:\n            this.supportCodeLibrary.afterTestCaseHookDefinitions.map(\n              (h) => h.id\n            ),\n        },\n        options: this.options,\n      },\n    }\n    worker.process.send(initializeCommand)\n  }\n\n  onWorkerProcessClose(exitCode: number): void {\n    const success = exitCode === 0\n    if (!success) {\n      this.success = false\n    }\n\n    if (\n      Object.values(this.workers).every((x) => x.state === WorkerState.closed)\n    ) {\n      const envelope: messages.Envelope = {\n        testRunFinished: {\n          timestamp: this.stopwatch.timestamp(),\n          success,\n        },\n      }\n      this.eventBroadcaster.emit('envelope', envelope)\n      this.onFinish(this.success)\n    }\n  }\n\n  parseTestCaseResult(testCaseFinished: messages.TestCaseFinished): void {\n    const { worstTestStepResult } = this.eventDataCollector.getTestCaseAttempt(\n      testCaseFinished.testCaseStartedId\n    )\n    if (\n      !testCaseFinished.willBeRetried &&\n      shouldCauseFailure(worstTestStepResult.status, this.options)\n    ) {\n      this.success = false\n    }\n  }\n\n  async start(): Promise<boolean> {\n    const envelope: messages.Envelope = {\n      testRunStarted: {\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', envelope)\n    this.stopwatch.start()\n    this.assembledTestCases = await assembleTestCases({\n      eventBroadcaster: this.eventBroadcaster,\n      newId: this.newId,\n      pickles: this.pickleIds.map((pickleId) =>\n        this.eventDataCollector.getPickle(pickleId)\n      ),\n      supportCodeLibrary: this.supportCodeLibrary,\n    })\n    return await new Promise<boolean>((resolve) => {\n      for (let i = 0; i < this.numberOfWorkers; i++) {\n        this.startWorker(i.toString(), this.numberOfWorkers)\n      }\n      this.onFinish = (status) => {\n        if (this.idleInterventions > 0) {\n          this.logger.warn(\n            `WARNING: All workers went idle ${this.idleInterventions} time(s). Consider revising handler passed to setParallelCanAssign.`\n          )\n        }\n\n        resolve(status)\n      }\n    })\n  }\n\n  nextPicklePlacement(): IPicklePlacement {\n    for (let index = 0; index < this.pickleIds.length; index++) {\n      const placement = this.placementAt(index)\n      if (\n        this.supportCodeLibrary.parallelCanAssign(\n          placement.pickle,\n          Object.values(this.inProgressPickles)\n        )\n      ) {\n        return placement\n      }\n    }\n\n    return null\n  }\n\n  placementAt(index: number): IPicklePlacement {\n    return {\n      index,\n      pickle: this.eventDataCollector.getPickle(this.pickleIds[index]),\n    }\n  }\n\n  giveWork(worker: IWorker, force: boolean = false): void {\n    if (this.pickleIds.length < 1) {\n      const finalizeCommand: IWorkerCommand = { finalize: true }\n      worker.state = WorkerState.running\n      worker.process.send(finalizeCommand)\n      return\n    }\n\n    const picklePlacement = force\n      ? this.placementAt(0)\n      : this.nextPicklePlacement()\n\n    if (picklePlacement === null) {\n      return\n    }\n\n    const { index: nextPickleIndex, pickle } = picklePlacement\n\n    this.pickleIds.splice(nextPickleIndex, 1)\n    this.inProgressPickles[worker.id] = pickle\n    const testCase = this.assembledTestCases[pickle.id]\n    const gherkinDocument = this.eventDataCollector.getGherkinDocument(\n      pickle.uri\n    )\n    const retries = retriesForPickle(pickle, this.options)\n    const skip = this.options.dryRun || (this.options.failFast && !this.success)\n    const runCommand: IWorkerCommand = {\n      run: {\n        retries,\n        skip,\n        elapsed: this.stopwatch.duration().nanos(),\n        pickle,\n        testCase,\n        gherkinDocument,\n      },\n    }\n    worker.state = WorkerState.running\n    worker.process.send(runCommand)\n  }\n}\n"]}