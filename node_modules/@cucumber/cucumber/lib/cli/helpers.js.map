{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/cli/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import shuffle from 'knuth-shuffle-seeded'\nimport { EventEmitter } from 'events'\nimport PickleFilter from '../pickle_filter'\nimport { EventDataCollector } from '../formatter/helpers'\nimport { doesHaveValue } from '../value_checker'\nimport { OptionSplitter } from '../configuration'\nimport { Readable } from 'stream'\nimport os from 'os'\nimport * as messages from '@cucumber/messages'\nimport { IdGenerator } from '@cucumber/messages'\nimport detectCiEnvironment from '@cucumber/ci-environment'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport TestCaseHookDefinition from '../models/test_case_hook_definition'\nimport TestRunHookDefinition from '../models/test_run_hook_definition'\nimport { PickleOrder } from '../models/pickle_order'\nimport { builtinParameterTypes } from '../support_code_library_builder'\nimport { version } from '../version'\nimport { ILogger } from '../logger'\n\ninterface IParseGherkinMessageStreamRequest {\n  cwd?: string\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  gherkinMessageStream: Readable\n  order: string\n  pickleFilter: PickleFilter\n}\n\n/**\n * Process a stream of envelopes from Gherkin and resolve to an array of filtered, ordered pickle Ids\n *\n * @param eventBroadcaster\n * @param eventDataCollector\n * @param gherkinMessageStream\n * @param order\n * @param pickleFilter\n */\nexport async function parseGherkinMessageStream({\n  eventBroadcaster,\n  eventDataCollector,\n  gherkinMessageStream,\n  order,\n  pickleFilter,\n}: IParseGherkinMessageStreamRequest): Promise<string[]> {\n  return await new Promise<string[]>((resolve, reject) => {\n    const result: string[] = []\n    gherkinMessageStream.on('data', (envelope: messages.Envelope) => {\n      eventBroadcaster.emit('envelope', envelope)\n      if (doesHaveValue(envelope.pickle)) {\n        const pickle = envelope.pickle\n        const pickleId = pickle.id\n        const gherkinDocument = eventDataCollector.getGherkinDocument(\n          pickle.uri\n        )\n        if (pickleFilter.matches({ gherkinDocument, pickle })) {\n          result.push(pickleId)\n        }\n      }\n    })\n    gherkinMessageStream.on('end', () => {\n      orderPickles(result, order, console)\n      resolve(result)\n    })\n    gherkinMessageStream.on('error', reject)\n  })\n}\n\n// Orders the pickleIds in place - morphs input\nexport function orderPickles<T = string>(\n  pickleIds: T[],\n  order: PickleOrder,\n  logger: ILogger\n): void {\n  const [type, seed] = OptionSplitter.split(order)\n  switch (type) {\n    case 'defined':\n      break\n    case 'random':\n      if (seed === '') {\n        const newSeed = Math.floor(Math.random() * 1000 * 1000).toString()\n        logger.warn(`Random order using seed: ${newSeed}`)\n        shuffle(pickleIds, newSeed)\n      } else {\n        shuffle(pickleIds, seed)\n      }\n      break\n    default:\n      throw new Error(\n        'Unrecgonized order type. Should be `defined` or `random`'\n      )\n  }\n}\n\nexport async function emitMetaMessage(\n  eventBroadcaster: EventEmitter,\n  env: NodeJS.ProcessEnv\n): Promise<void> {\n  const meta: messages.Meta = {\n    protocolVersion: messages.version,\n    implementation: {\n      version,\n      name: 'cucumber-js',\n    },\n    cpu: {\n      name: os.arch(),\n    },\n    os: {\n      name: os.platform(),\n      version: os.release(),\n    },\n    runtime: {\n      name: 'node.js',\n      version: process.versions.node,\n    },\n    ci: detectCiEnvironment(env),\n  }\n  eventBroadcaster.emit('envelope', {\n    meta,\n  })\n}\n\nfunction emitParameterTypes(\n  supportCodeLibrary: ISupportCodeLibrary,\n  eventBroadcaster: EventEmitter,\n  newId: IdGenerator.NewId\n): void {\n  for (const parameterType of supportCodeLibrary.parameterTypeRegistry\n    .parameterTypes) {\n    if (builtinParameterTypes.includes(parameterType.name)) {\n      continue\n    }\n    const envelope: messages.Envelope = {\n      parameterType: {\n        id: newId(),\n        name: parameterType.name,\n        preferForRegularExpressionMatch: parameterType.preferForRegexpMatch,\n        regularExpressions: parameterType.regexpStrings,\n        useForSnippets: parameterType.useForSnippets,\n      },\n    }\n    eventBroadcaster.emit('envelope', envelope)\n  }\n}\n\nfunction emitUndefinedParameterTypes(\n  supportCodeLibrary: ISupportCodeLibrary,\n  eventBroadcaster: EventEmitter\n): void {\n  for (const undefinedParameterType of supportCodeLibrary.undefinedParameterTypes) {\n    const envelope: messages.Envelope = {\n      undefinedParameterType,\n    }\n    eventBroadcaster.emit('envelope', envelope)\n  }\n}\n\nfunction emitStepDefinitions(\n  supportCodeLibrary: ISupportCodeLibrary,\n  eventBroadcaster: EventEmitter\n): void {\n  supportCodeLibrary.stepDefinitions.forEach((stepDefinition) => {\n    const envelope: messages.Envelope = {\n      stepDefinition: {\n        id: stepDefinition.id,\n        pattern: {\n          source: stepDefinition.pattern.toString(),\n          type:\n            typeof stepDefinition.pattern === 'string'\n              ? messages.StepDefinitionPatternType.CUCUMBER_EXPRESSION\n              : messages.StepDefinitionPatternType.REGULAR_EXPRESSION,\n        },\n        sourceReference: {\n          uri: stepDefinition.uri,\n          location: {\n            line: stepDefinition.line,\n          },\n        },\n      },\n    }\n    eventBroadcaster.emit('envelope', envelope)\n  })\n}\n\nfunction emitTestCaseHooks(\n  supportCodeLibrary: ISupportCodeLibrary,\n  eventBroadcaster: EventEmitter\n): void {\n  ;[]\n    .concat(\n      supportCodeLibrary.beforeTestCaseHookDefinitions,\n      supportCodeLibrary.afterTestCaseHookDefinitions\n    )\n    .forEach((testCaseHookDefinition: TestCaseHookDefinition) => {\n      const envelope: messages.Envelope = {\n        hook: {\n          id: testCaseHookDefinition.id,\n          name: testCaseHookDefinition.name,\n          tagExpression: testCaseHookDefinition.tagExpression,\n          sourceReference: {\n            uri: testCaseHookDefinition.uri,\n            location: {\n              line: testCaseHookDefinition.line,\n            },\n          },\n        },\n      }\n      eventBroadcaster.emit('envelope', envelope)\n    })\n}\n\nfunction emitTestRunHooks(\n  supportCodeLibrary: ISupportCodeLibrary,\n  eventBroadcaster: EventEmitter\n): void {\n  ;[]\n    .concat(\n      supportCodeLibrary.beforeTestRunHookDefinitions,\n      supportCodeLibrary.afterTestRunHookDefinitions\n    )\n    .forEach((testRunHookDefinition: TestRunHookDefinition) => {\n      const envelope: messages.Envelope = {\n        hook: {\n          id: testRunHookDefinition.id,\n          sourceReference: {\n            uri: testRunHookDefinition.uri,\n            location: {\n              line: testRunHookDefinition.line,\n            },\n          },\n        },\n      }\n      eventBroadcaster.emit('envelope', envelope)\n    })\n}\n\nexport function emitSupportCodeMessages({\n  eventBroadcaster,\n  supportCodeLibrary,\n  newId,\n}: {\n  eventBroadcaster: EventEmitter\n  supportCodeLibrary: ISupportCodeLibrary\n  newId: IdGenerator.NewId\n}): void {\n  emitParameterTypes(supportCodeLibrary, eventBroadcaster, newId)\n  emitUndefinedParameterTypes(supportCodeLibrary, eventBroadcaster)\n  emitStepDefinitions(supportCodeLibrary, eventBroadcaster)\n  emitTestCaseHooks(supportCodeLibrary, eventBroadcaster)\n  emitTestRunHooks(supportCodeLibrary, eventBroadcaster)\n}\n"]}